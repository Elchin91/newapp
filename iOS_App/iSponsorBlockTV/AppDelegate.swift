import UIKit
import Python

@main
class AppDelegate: UIResponder, UIApplicationDelegate {

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Python –æ–∫—Ä—É–∂–µ–Ω–∏—è
        setupPythonEnvironment()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        setupBackgroundTasks()
        
        return true
    }

    // MARK: UISceneSession Lifecycle

    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {
        // Called when a new scene session is being created.
        // Use this method to select a configuration to create the new scene with.
        return UISceneConfiguration(name: "Default Configuration", sessionRole: connectingSceneSession.role)
    }

    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set<UISceneSession>) {
        // Called when the user discards a scene session.
        // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.
        // Use this method to release any resources that were specific to the discarded scenes, as they will not return.
    }
    
    // MARK: - Python Environment Setup
    
    private func setupPythonEnvironment() {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Python —Ä–µ—Å—É—Ä—Å–∞–º –≤ bundle
        guard let pythonResourcesPath = Bundle.main.path(forResource: "PythonResources", ofType: nil) else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã Python —Ä–µ—Å—É—Ä—Å—ã –≤ bundle")
            return
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Python –ø—É—Ç—å
        let pythonPath = "\(pythonResourcesPath)/lib/python3.11"
        let sitePath = "\(pythonResourcesPath)/lib/python3.11/site-packages"
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Python
        setenv("PYTHONPATH", "\(pythonPath):\(sitePath)", 1)
        setenv("PYTHONHOME", pythonResourcesPath, 1)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Python
        Py_Initialize()
        
        print("‚úÖ Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        print("üìÅ Python –ø—É—Ç—å: \(pythonPath)")
    }
    
    // MARK: - Background Tasks
    
    private func setupBackgroundTasks() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        BGTaskScheduler.shared.register(forTaskWithIdentifier: "tv.sponsorblock.iSponsorBlockTV.background-sync", using: nil) { task in
            self.handleBackgroundSync(task: task as! BGProcessingTask)
        }
    }
    
    private func handleBackgroundSync(task: BGProcessingTask) {
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        scheduleBackgroundSync()
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        task.expirationHandler = {
            task.setTaskCompleted(success: false)
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        DispatchQueue.global(qos: .background).async {
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            task.setTaskCompleted(success: true)
        }
    }
    
    private func scheduleBackgroundSync() {
        let request = BGProcessingTaskRequest(identifier: "tv.sponsorblock.iSponsorBlockTV.background-sync")
        request.requiresNetworkConnectivity = true
        request.requiresExternalPower = false
        request.earliestBeginDate = Date(timeIntervalSinceNow: 15 * 60) // 15 –º–∏–Ω—É—Ç
        
        try? BGTaskScheduler.shared.submit(request)
    }
    
    func applicationDidEnterBackground(_ application: UIApplication) {
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ñ–æ–Ω
        scheduleBackgroundSync()
    }
} 